{"version":3,"file":"static/js/368.de5c46fd.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/UserMenu/UserMenu.module.css?1b0e","components/UserMenu/UserMenu.jsx","redux/contacts/contactsSelector.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsForm/ContactsForm.module.css?d5f2","components/ContactsForm/ContactsForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/UserPhonebook/UserPhonebook.module.css?3668","components/UserPhonebook/UserPhonebook.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"infoHeader\":\"UserMenu_infoHeader__7HVCX\",\"email\":\"UserMenu_email__xoBAv\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { AiOutlineLogout } from 'react-icons/ai';\nimport { getUserEmail } from 'redux/auth/authSelector';\nimport { Button } from '@mui/material';\nimport s from './UserMenu.module.css';\nimport { logOutUser } from 'redux/auth/authOperations';\n\nfunction UserMenu() {\n  const email = useSelector(getUserEmail);\n  const dispatch = useDispatch();\n\n  return (\n    <div className={s.infoHeader}>\n      <p className={s.email}>{email}</p>\n      <Button\n        variant=\"contained\"\n        className={s.button}\n        onClick={() => dispatch(logOutUser())}\n      >\n        LOG OUT &nbsp;\n        <AiOutlineLogout />\n      </Button>\n    </div>\n  );\n}\n\nexport default UserMenu;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (items, filter) => {\n    const filteredContacts = items.filter(el =>\n      el.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return filteredContacts;\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"paragraph\":\"ContactList_paragraph__6LYsd\",\"name\":\"ContactList_name__UCkFW\",\"spinner\":\"ContactList_spinner__0VKxO\",\"button\":\"ContactList_button__7kL4l\",\"total\":\"ContactList_total__PX5ig\"};","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, removeContacts } from 'redux/contacts/contactsOperations';\nimport { getUserToken } from 'redux/auth/authSelector';\nimport {\n  getFilteredContacts,\n  getIsLoading,\n} from 'redux/contacts/contactsSelector';\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Loader from 'components/Loader/Loader';\nimport s from './ContactList.module.css';\n\nconst ContactList = () => {\n  const isLoading = useSelector(getIsLoading);\n  const contacts = useSelector(getFilteredContacts);\n  const token = useSelector(getUserToken);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!token) return;\n    dispatch(getContacts(token));\n  }, [token, dispatch]);\n\n  return (\n    <>\n      <div>\n        <ul className={s.list}>\n          {contacts.map(({ id, name, number }) => (\n            <li key={id} className={s.item}>\n              <p className={s.paragraph}>\n                <span className={s.name}>{name}</span>: {number}\n              </p>\n              <Button\n                variant=\"outlined\"\n                startIcon={<DeleteIcon />}\n                className={s.button}\n                onClick={() => dispatch(removeContacts(id))}\n              >\n                Delete\n              </Button>\n            </li>\n          ))}\n        </ul>\n        {isLoading && <Loader />}\n      </div>\n    </>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactsForm_form__1Y65-\",\"error\":\"ContactsForm_error__ateuU\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { toast } from 'react-toastify';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport { addContacts } from 'redux/contacts/contactsOperations';\nimport { getContacts } from 'redux/contacts/contactsSelector';\nimport s from './ContactsForm.module.css';\n\nconst ContactsForm = () => {\n  const items = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    },\n\n    validationSchema: Yup.object({\n      name: Yup.string()\n        .min(2, 'Too Short!')\n        .max(15, 'Too Long!')\n        .required('This is a required field'),\n      number: Yup.string().required('This is a required field'),\n    }),\n  });\n\n  const reset = () => {\n    formik.values.name = '';\n    formik.values.number = '';\n  };\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    const { name, number } = formik.values;\n    if (name === '' || number === '') {\n      toast.error('All fields must be completed', {\n        autoClose: 2000,\n        theme: 'colored',\n      });\n      return;\n    }\n    const repeatOfNames = items.find(\n      el => el.name.toLowerCase() === name.toLowerCase()\n    );\n    if (repeatOfNames) {\n      toast.error(`${name} is already in contacts.`, {\n        autoClose: 2000,\n        theme: 'colored',\n      });\n      return;\n    }\n    const newContact = { name, number };\n    dispatch(addContacts(newContact));\n    reset();\n  };\n\n  return (\n    <form onSubmit={onFormSubmit} className={s.form}>\n      <TextField\n        margin=\"normal\"\n        fullWidth\n        id=\"name\"\n        label=\"Name\"\n        type=\"text\"\n        name=\"name\"\n        variant=\"standard\"\n        onBlur={formik.handleBlur}\n        onChange={formik.handleChange}\n        value={formik.values.name}\n      />\n      <p className={s.error}>\n        {formik.touched.name && formik.errors.name && formik.errors.name}\n      </p>\n      <TextField\n        margin=\"normal\"\n        fullWidth\n        id=\"number\"\n        label=\"Phone number\"\n        type=\"tel\"\n        name=\"number\"\n        variant=\"standard\"\n        onBlur={formik.handleBlur}\n        onChange={formik.handleChange}\n        value={formik.values.number}\n      />\n      <p className={s.error}>\n        {formik.touched.number && formik.errors.number && formik.errors.number}\n      </p>\n      <Button type=\"submit\" fullWidth variant=\"contained\" sx={{ mt: 3, mb: 2 }}>\n        ADD CONTACT\n      </Button>\n    </form>\n  );\n};\n\nexport default ContactsForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\",\"filter\":\"Filter_filter__vxThR\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/contacts/contactsSelector';\nimport { filterContacts } from '../../redux/contacts/contactsSlice';\nimport s from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div className={s.filter}>\n      <label className={s.label}>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          className={s.input}\n          value={filter}\n          onChange={e => dispatch(filterContacts(e.target.value))}\n          required\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"phonebook\":\"UserPhonebook_phonebook__U9q3B\",\"input\":\"UserPhonebook_input__spPUF\"};","import ContactList from 'components/ContactList/ContactList';\nimport ContactsForm from 'components/ContactsForm/ContactsForm';\nimport Filter from 'components/Filter/Filter';\nimport s from './UserPhonebook.module.css';\n\nfunction UserPhonebook() {\n  return (\n    <div className={s.phonebook}>\n      <div className={s.input}>\n        <ContactsForm />\n        <Filter />\n      </div>\n      <ContactList />\n    </div>\n  );\n}\n\nexport default UserPhonebook;\n","import UserMenu from 'components/UserMenu/UserMenu';\nimport UserPhonebook from 'components/UserPhonebook/UserPhonebook';\n\nfunction ContactsPage() {\n  return (\n    <>\n      <UserMenu />\n      <UserPhonebook />\n    </>\n  );\n}\n\nexport default ContactsPage;\n"],"names":["email","useSelector","getUserEmail","dispatch","useDispatch","className","s","Button","variant","onClick","logOutUser","getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","getFilteredContacts","createSelector","el","name","toLowerCase","includes","token","getUserToken","useEffect","map","id","number","startIcon","Delete","removeContacts","Loader","formik","useFormik","initialValues","onSubmit","values","alert","JSON","stringify","validationSchema","Yup","min","max","required","e","preventDefault","find","toast","autoClose","theme","newContact","addContacts","TextField","margin","fullWidth","label","type","onBlur","handleBlur","onChange","handleChange","value","touched","errors","sx","mt","mb","filterContacts","target"],"sourceRoot":""}